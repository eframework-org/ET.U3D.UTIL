name: 单元测试

on:
  workflow_dispatch:
  workflow_call:
    outputs:
      test_passed:
        description: "测试是否通过"
        value: ${{ jobs.test.outputs.passed }}
    secrets:
      UNITY_LICENSE:
        required: true
      UNITY_EMAIL:
        required: true
      UNITY_PASSWORD:
        required: true

permissions:
  checks: write
  contents: read
  actions: read
  security-events: write

jobs:
  test:
    name: 测试 ${{ matrix.testMode }} 环境
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        projectPath:
          - Package
        unityVersion: [6000.0.32f1]
        testMode: [EditMode]
    outputs:
      passed: ${{ steps.tests.conclusion == 'success' }}

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          lfs: true
          path: Package

      - name: 准备镜像
        shell: bash
        run: |
          # 创建 Dockerfile
          cat > Dockerfile << EOF
          # 基于 unityci/editor 镜像
          FROM unityci/editor:ubuntu-${{ matrix.unityVersion }}-linux-il2cpp-3

          # 安装 Node.js
          RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - && \\
              apt-get install -y nodejs

          # 安装 MinIO 依赖
          RUN apt-get update && apt-get install -y \\
              curl \\
              ca-certificates \\
              && rm -rf /var/lib/apt/lists/*

          # 创建 MinIO 目录
          RUN mkdir -p /minio/data

          # 安装 MinIO 服务器
          RUN curl -O https://dl.min.io/server/minio/release/linux-amd64/minio && \\
              chmod +x minio && \\
              mv minio /usr/local/bin/

          # 安装 MinIO 客户端
          RUN curl -O https://dl.min.io/client/mc/release/linux-amd64/mc && \\
              chmod +x mc && \\
              mv mc /usr/local/bin/

          # 设置 MinIO 环境变量
          ENV MINIO_ACCESS_KEY=admin
          ENV MINIO_SECRET_KEY=adminadmin

          # 创建启动脚本
          RUN echo '#!/bin/bash\\n\
          # 启动 MinIO 服务器\\n\
          nohup minio server /minio/data --console-address ":9090" --address ":9000" > /minio/minio.log 2>&1 &\\n\
          \\n\
          # 等待 MinIO 服务就绪\\n\
          echo "等待 MinIO 服务启动..."\\n\
          max_retries=30\\n\
          retry_interval=2\\n\
          retry_count=0\\n\
          \\n\
          until curl -s --head http://localhost:9000/minio/health/ready || [ \\$retry_count -eq \\$max_retries ]; do\\n\
            echo "等待 MinIO 服务就绪... (尝试 \\$retry_count/\\$max_retries)"\\n\
            sleep \\$retry_interval\\n\
            retry_count=\\$((retry_count+1))\\n\
          done\\n\
          \\n\
          if [ \\$retry_count -eq \\$max_retries ]; then\\n\
            echo "MinIO 服务启动超时"\\n\
            exit 1\\n\
          fi\\n\
          \\n\
          echo "MinIO 服务已就绪"\\n\
          \\n\
          # 配置 MinIO 客户端\\n\
          mc alias set myminio http://localhost:9000 admin adminadmin\\n\
          \\n\
          # 创建 default bucket 并设置为公开访问\\n\
          mc mb myminio/default || true\\n\
          mc anonymous set public myminio/default\\n\
          \\n\
          echo "MinIO 环境设置完成，default bucket 已创建并设置为公开访问"\\n\
          \\n\
          # 执行传入的命令\\n\
          exec "\\$@"' > /usr/local/bin/entrypoint.sh

          RUN chmod +x /usr/local/bin/entrypoint.sh

          # 设置镜像入口
          ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
          CMD ["bash"]
          EOF
          
          # 构建镜像
          docker build -t unity-editor-nodejs:latest .
          
          # 显示镜像信息
          docker images | grep unity-editor-nodejs

      - name: 运行测试
        uses: game-ci/unity-test-runner@v4
        id: tests
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          packageMode: true
          projectPath: ${{ matrix.projectPath }}
          unityVersion: ${{ matrix.unityVersion }}
          scopedRegistryUrl: https://registry.npmjs.org/
          registryScopes: 'et, ep'
          testMode: ${{ matrix.testMode }}
          artifactsPath: Results
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          checkName: 测试 ${{ matrix.testMode }} 报告
          useHostNetwork: true
          customImage: unity-editor-nodejs:latest

      - name: 上传报告
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Test.${{ matrix.testMode }}.Reports
          path: ${{ steps.tests.outputs.artifactsPath }}
          retention-days: 14